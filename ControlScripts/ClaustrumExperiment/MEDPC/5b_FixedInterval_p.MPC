\***************************************************
\               File Description Comments
\***************************************************

\ Lever Habituation by SeÃ¡n Martin on 11/07/2019
    \ Brief Description: Fixed interval - Lever only gives a reward after waiting X seconds from last press.
    \ Ending criteria: Ends after 30mins, or after 45 pellets.
    \ Locked pins: Remember to turn off the fan (16) 

\***************************************************
\               Constant Definitions
\***************************************************
\ Experiment variable locations
    ^MaxTimeIdx = 0
    ^MaxPelletIdx = 1
    ^RequiredPelletsIdx = 2
    ^InterResponseTimeIdx = 3

\ Index holder locations
    ^FeederTimeIdx = 0
    ^NosepokeTimeIdx = 1
    ^LeftLeverTimeIdx = 2
    ^WrongLeftTimeIdx = 3
    ^WrongNosepokeTimeIdx = 4

\ Counter locations
    ^FeederCountIdx = 0
    ^NosepokeCountIdx = 1
    ^LeftLeverCountIdx = 2
    ^WrongLeftCountIdx = 3
    ^WrongNosepokeCountIdx = 4

\ Inputs
    ^LeftLever = 1
    ^Nosepoke = 7

\ Outputs
    ^LeftLeverOut = 1
    ^LeftLight = 4
    ^HouseLight = 7
    ^Sound = 8
    ^Feeder = 9
    ^FanBox = 16

\***************************************************
\               Variable Descriptions
\***************************************************

\ Aliases
    VAR_ALIAS Maximum Time (min) = A(0) \ Default 30 minutes
    VAR_ALIAS Max Pellets = A(1) \ Default 45
    VAR_ALIAS Pellets To Advance = A(2) \ Default 45
    VAR_ALIAS Fixed Interval (secs) = A(3) \ Default 20s

\ Arrays
    \ A = Experiment variables
    \ B = Index holders
    \ C = Counters
    \ D = Data array for feeder drop times
    \ E = Data array for nosepoke times
    \ N = Data array for unnecessary left response times
    \ O = Data array for unnecessary nosepoke times
    \ R = Data array for left lever response times

    DIM A = 3
    DIM B = 4
    DIM C = 4
    DIM D = 120 \ Should be large enough to hold max_pellets + 1
    DIM E = 120 \ Should be large enough to hold max_pellets + 1
    DIM N = 100000 \ Could be anything
    DIM O = 100000 \ Could be anything
    DIM R = 1000 \ Should be large enough to hold (max_pellets * max_fr) + 1

\ Counter descriptions
    \ C(0) = Number of Pellets dropped
    \ C(1) = Number of Nosepokes
    \ C(2) = Number of left lever presses
    \ C(3) = Number of unnecessary left lever presses
    \ C(4) = Number of unnecessary nosepokes

\ Z Pulses
    \ Z1 = Screen update pulse
    \ Z2 = Activate Feeder
    \ Z32 = End the session

\ Single Variables
    \ P = Should pass test (1 = Yes, 0 = No)
    \ T = Elapsed time

\ List of Variables to save at end of trial
    DISKVARS = A, B, C, D, E, N, O, P, R, T

\***************************************************
\               Implementation
\***************************************************

S.S.1, \ Control flow

    S1, \ Establish default values and turn on fan
        0.01": SET A(^MaxTimeIdx) = 30; SET A(^MaxPelletIdx) = 45; SET A(^RequiredPelletsIdx) = 45; SET A(^InterResponseTimeIdx) = 20; SET D(0) = -987.987; SET E(0) = -987.987; SET N(0) = -987.987; SET O(0) = -987.987; SET R(0) = -987.987; LOCKON ^FanBox; Z1 ---> S2

    S2, \ Wait for start signal
        #START: ON ^HouseLight; ON ^LeftLeverOut; ON ^LeftLight; Z1 ---> S3

    S3, \ Time the session and flag off after Max Time or condition met
        0.01": SET T = T + 0.01; IF T/60 >= A(^MaxTimeIdx) [@EndSession, @ContinueSession] 
                 @End: Z32 ---> S4
                 @Cont: IF C(^NosepokeCountIdx) >= A(^MaxPelletIdx) [@EndSession]
                     @End: Z32 ---> S4


    S4, \ Did the subject pass or fail?
        0.01": OFF ^LeftLeverOut; OFF ^HouseLight; OFF ^LeftLight; IF C(^FeederCountIdx) >= A(^RequiredPelletsIdx) [@Succeed, @Fail] 
                 @Succ: SET P = 1 ---> S5
                 @Fail: SET P = 0 ---> S5
 
    S5, \ Stop the session
        3": ---> STOPABORTFLUSH

\***************************************************
\                Main Program
\***************************************************
S.S.2, \ Experiment logic

    S1, \ Wait for experiment start
        #START: SET A(^InterResponseTimeIdx) = A(^InterResponseTimeIdx) * 1" ---> S2

    S2, \ Drop pellets

        1 #R ^LeftLever: SET R(B(^LeftLeverTimeIdx)) = T; ADD B(^LeftLeverTimeIdx); ADD C(^LeftLeverCountIdx); SET R(B(^LeftLeverTimeIdx)) = -987.987; Z1; Z2 ---> S3

    S3, \ Pellet has been dropped, detect left presses and handle FI

        1 #R ^LeftLever: SET N(B(^WrongLeftTimeIdx)) = T; ADD B(^WrongLeftTimeIdx); ADD C(^WrongLeftCountIdx); SET N(B(^WrongLeftTimeIdx)) = -987.987; Z1 ---> SX

        1 #R ^Nosepoke: ---> S4

    S4, \ IRT starts after nosepoke
        A(^InterResponseTimeIdx)#T: ---> S2

        1 #R ^LeftLever: SET N(B(^WrongLeftTimeIdx)) = T; ADD B(^WrongLeftTimeIdx); ADD C(^WrongLeftCountIdx); SET N(B(^WrongLeftTimeIdx)) = -987.987; Z1 ---> SX

S.S.5, \ Detect unnecessary nosepokes and record the times

    S1, \Wait for experiment start
        #START: ---> S2

    S2, \ Detect unnecessary nosepokes
        1 #R ^Nosepoke: SET O(B(^WrongNosepokeTimeIdx)) = T; ADD B(^WrongNosepokeTimeIdx); ADD C(^WrongNosepokeCountIdx); SET O(B(^WrongNosepokeTimeIdx)) = -987.987; Z1 ---> SX

        #Z2: ---> S3
    
    S3, \ Detect correct nosepoke
        1 #R ^Nosepoke: SET E(B(^NosepokeTimeIdx)) = T; SET J = T; ADD B(^NosepokeTimeIdx); ADD C(^NosepokeCountIdx); SET E(B(^NosepokeTimeIdx)) = -987.987; Z1 ---> S2

S.S.7, \ Drop pellets

    S1, \ Drop the pellet
        #Z2: ON ^Feeder; SET D(B(^FeederTimeIdx)) = T; ADD B(^FeederTimeIdx); ADD C(^FeederCountIdx); SET D(B(^FeederTimeIdx)) = -987.987; Z1 ---> S2

    S2, \ Turn off the feeder after dropping
        0.5": OFF ^Feeder ---> S1

S.S.8, \ Turn on the sound and then off again

    S1,
        #START: ON ^Sound; ---> S2
    
    S2, 
        3": OFF ^Sound; ---> S1

S.S.10, \ Update the display

    S1, \ Wait 9.99 seconds or for a Z-Pulse
        9.99": ---> S2

        #Z1: ---> S2

    S2, \ Update the screen
        .01": SHOW 1, Experiment Time, T; SHOW 2, Pellets, C(^FeederCountIdx); SHOW 3, Correct Nosepokes, C(^NosepokeCountIdx); SHOW 4, Unnecessary Nosepokes, C(^WrongNosepokeCountIdx); SHOW 5, Correct Lefts, C(^LeftLeverCountIdx); SHOW 6, Unnecessary Lefts, C(^WrongLeftCountIdx); ---> S1
